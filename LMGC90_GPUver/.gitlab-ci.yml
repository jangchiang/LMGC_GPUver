
variables:
  ref_sha1: '3ce8adb54593169f75d81abbfafe6cdd164b24b2'
  list_lfs: 'examples/Tutorials/rigid/post/hdf5/lmgc90.h5'
  DEMMEFI_BRANCH: master
  nb_proc: 12
  web_nreg: "false"

# https://gitlab.com/gitlab-org/gitlab/-/issues/15065#note_1134628726
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/'
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_TAG != null
      when: always
    - when: never

stages:
  - build
  - test
  - ref_generation
  - non_regression
  - external-trigger
  - deploy

.build_template: &build_def
  stage: build
  script:
    - mkdir build_${linux}_${py}
    - cd build_${linux}_${py}
    - cmake .. ${h5f} ${omp} -DBUILD_STANDALONE=ON
    - make -j${nb_proc}
  artifacts:
    when: on_success
    paths:
      - build_${linux}_${py}

.test_template: &test_def
  stage: test
  script:
    - cd build_${linux}_${py}
    - ctest -j${nb_proc}
  artifacts:
    name: test_fail
    when: on_failure
    paths:
      - build_${linux}_${py}/CMakeCache.txt
      - build_${linux}_${py}/Testing
      - build_${linux}_${py}/test
    paths:
      - build_${linux}_${py}

.gref_template: &gref_def
  stage: ref_generation
  script:
    #- git fetch --tags
    #- git checkout tags/ref_result
    - git reset HEAD ${list_lfs}
    - git checkout -- ${list_lfs}
    - git checkout ${ref_sha1}
    - mkdir ref_results_${linux}_${py}
    - mkdir build_ref_${linux}_${py}
    - cd build_ref_${linux}_${py}
    - cmake .. ${h5f} ${omp} -DSAVE_REGRESSION_BASE=$PWD/../ref_results_${linux}_${py}
    - make -j${nb_proc}
    - ctest -C save_reg -L quick -j${nb_proc}
  artifacts:
    name: build_ref
    when: on_failure
    paths:
      - build_ref_${linux}_${py}/CMakeCache.txt
      - build_ref_${linux}_${py}/Testing
      - build_ref_${linux}_${py}/examples
    name: result_ref
    when: on_success
    paths:
      - ref_results_${linux}_${py}

.nreg_template: &nreg_def
  stage: non_regression
  rules:
  script:
    - cd build_${linux}_${py}
    - cmake . -DNON_REGRESSION_BASE=$PWD/../ref_results_${linux}_${py}
    - ctest -C non_reg -L quick -j${nb_proc}
  artifacts:
    when: on_failure
    paths:
      - build_${linux}_${py}/CMakeCache.txt
      - build_${linux}_${py}/Testing
      - build_${linux}_${py}/examples


build:archpyhdf5:
  variables:
    linux: arch
    py: py
    h5f: "-DWITH_HDF5=ON"
    omp: "-DWITH_OPENMP=ON"
  <<: *build_def
  tags:
    - arch
    - py
    - hdf5

build:ub24py312h5f:
  variables:
    linux: ub24
    py: py312
    h5f: "-DWITH_HDF5=ON"
  <<: *build_def
  tags:
    - ub24
    - py312
    - hdf5

build:ub22py310h5f:
  variables:
    linux: ub22
    py: py310
    h5f: "-DWITH_HDF5=ON"
  <<: *build_def
  tags:
    - ub22
    - py310
    - hdf5

build:ub20py38h5f:
  variables:
    linux: ub20
    py: py38
    h5f: "-DWITH_HDF5=ON"
  <<: *build_def
  tags:
    - ub20
    - py38
    - hdf5

test:archpyhdf5:
  variables:
    linux: arch
    py: py
  dependencies:
    - build:archpyhdf5
  <<: *test_def
  tags:
    - arch
    - py
    - hdf5

test:ub24py312h5f:
  variables:
    linux: ub24
    py: py312
  dependencies:
    - build:ub24py312h5f
  <<: *test_def
  tags:
    - ub24
    - py312
    - hdf5

test:ub22py310h5f:
  variables:
    linux: ub22
    py: py310
  dependencies:
    - build:ub22py310h5f
  <<: *test_def
  tags:
    - ub22
    - py310
    - hdf5

test:ub20py38h5f:
  variables:
    linux: ub20
    py: py38
  dependencies:
    - build:ub20py38h5f
  <<: *test_def
  tags:
    - ub20
    - py38
    - hdf5

gref:ub24py312h5f:
  variables:
    linux: ub24
    py: py312
    h5f: "-DWITH_HDF5=ON"
  dependencies:
    - test:ub24py312h5f
  <<: *gref_def
  tags:
    - ub24
    - py312
    - hdf5

gref:ub22py310h5f:
  variables:
    linux: ub22
    py: py310
    h5f: "-DWITH_HDF5=ON"
  dependencies:
    - test:ub22py310h5f
  <<: *gref_def
  tags:
    - ub22
    - py310
    - hdf5

gref:ub20py38h5f:
  variables:
    linux: ub20
    py: py38
    h5f: "-DWITH_HDF5=ON"
  dependencies:
    - test:ub20py38h5f
  <<: *gref_def
  tags:
    - ub20
    - py38
    - hdf5

nreg:ub24py312h5f:
  variables:
    linux: ub24
    py: py312
    h5f: "-DWITH_HDF5=ON"
  dependencies:
    - build:ub24py312h5f
    - gref:ub24py312h5f
  <<: *nreg_def
  tags:
    - ub24
    - py312
    - hdf5

nreg:ub22py310h5f:
  variables:
    linux: ub22
    py: py310
    h5f: "-DWITH_HDF5=ON"
  dependencies:
    - build:ub22py310h5f
    - gref:ub22py310h5f
  <<: *nreg_def
  tags:
    - ub22
    - py310
    - hdf5

nreg:ub20py38h5f:
  variables:
    linux: ub20
    py: py38
    h5f: "-DWITH_HDF5=ON"
  dependencies:
    - build:ub20py38h5f
    - gref:ub20py38h5f
  <<: *nreg_def
  tags:
    - ub20
    - py38
    - hdf5

demmefi:ub20py38h5f:
  stage: external-trigger
  only:
    - merge_requests
    - pipelines
    - web
  variables:
    linux: ub20
    py: py38
    LMGC90_BRANCH: ${CI_COMMIT_REF_NAME}
  trigger:
    project: demmefi/lmgc90
    branch: ${DEMMEFI_BRANCH}
  
pages:
  stage: deploy
  variables:
    ZIP_FILE: lmgc90_user_$CI_COMMIT_TAG.zip
  script:
    - sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml
    - mv src/tools/scripts/user_version.sh .
    - sh user_version.sh "$CI_COMMIT_TAG"
    - mkdir public/downloads
    - mv "$ZIP_FILE" public/downloads/
  artifacts:
    paths:
      - public
  only:
    - tags
  tags:
    - ub22
    - py310
    - hdf5

