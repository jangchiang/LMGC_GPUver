.. py:currentmodule:: pylmgc90.chipy.macro

		      
Displaying and postprocessing results of LMGC90
===============================================

Displaying
----------

LMGC90 offers *functions* to generates **vtk** files. Such files can be displayed by paraview or visit. 

Generating **vtk** files is driven by some functions of the
**pylmgc90.chipy** module ::

  # open some vtk files (pvd) and initialize some internal variables
  chipy.OpenDisplayFiles()

  # Time loop
  
    # writes the vtk files
    chipy.WriteDisplayFiles()

  # close files
  chipy.CloseDisplayFiles()

See :py:func:`OpenDisplayFiles` for function optional arguments.
In case of restart in an existing folder the value of
argument *restart* will give ne number of the first file to write.  

See :py:func:`WriteDisplayFiles` for function optional arguments.

Files are written in **DISPLAY** folder.  You will obtain sequence of vtu
(unstructured mesh) or vtp (polydata) files and pvd (xml) files which
relates files to physical time.

The following files are created :

- **mecafe_xx.vtu**, **mecafe.pvd** : contains values attached to *MAILx* with *MECAx* model

- **therfe_xx.vtu**, **therfe.pvd**: contains values attached to *MAILx* with *THERx* model

- **porofe_xx.vtu**,  **porofe.pvd** :  contains values attached to *MAILx* with *POROx* model

- **rigids_xx.vtu**,  **rigids.pvd** : contains values attached to *RBDY2* or *RBDY3* models

- **tacts_xx.vtp**,  **tacts.pvd**: contains value attached to contactors 

- **ptc_xx.vtu** : contains value attached to contacts

It is possible to add some fields to the files. For example ::

 # create an array to store a nodal field for each mesh   
 status=[]
 # here the nodal field is generated by a built-in function
 status.append(mecaMAILx_GetDofStatus(1))

 # time loop
   
   # ...

   # add a nodel field to mecafe files 
   chipy.WriteDisplayFiles(freq=freq_display,DrvDof=('mecaFE','node',status) )


Postprocessing
--------------

LMGC90 offers some builtin *functions* to analyze the results.

Generating these files is driven by some functions of the
**pylmgc90.chipy** module ::

  # open some postpro files and initialize some internal variables
  chipy.OpenPostproFiles() 

  # Time loop
  
    # writes the vtk files
    chipy.WritePostproFiles()

  # close files
  chipy.ClosePostproFiles()

The *OpenPostproFiles()* function has an optional argument:
*restart=0*. In case of restart in an existing folder the value of
argument *restart* will give ne number of the first file to write. 

Files are created in **POSTPRO** folder.
The postpro commands are declared during the pre-processing phase see
:ref:`pre_post-label` . 
The content of the files is described in *manuals/LMGC90_Postpro.pdf*. 
